#!/usr/bin/env ruby
#
#  USAGE
#
#  build a base file that contains an empty project
#
#
#  hustle new [base image]
#
#  SYNTAX
#
#  hustle build [dev image]        # build image
#  hustle new [base image]         # creates new dev env based on base image
#
#  hustle stop [container]             # stop container
#  hustle start, s [env = dev]     # start dev container
#    -w                            # watch for changes (file-permissions-sync)
#
#  hustle pristine [container]         # stop and remove container from docker
#  hustle rebuild, [dev]           # rebuild container
#
#  hustle sync [dev]               # copy dev app files to local
#  hustle file-permissions-sync [dev]    # watch for new files and sync
#  hustle run [cmd] [container]        # run command on container
#  hustle debug                    # Shell into new container based off container
#  hustle shell                    # Shell into running container
#
require 'optparse'


class Hustler < Struct.new(:argv, :options)
  DOT_FILE = '.env'
  RC_FILE  = '.hustlerc'

  
  def container_run_regex
    if (defaults = ENV['CONTAINER_RUN']).nil?
      lines = (File.exists?(RC_FILE) && File.readlines(RC_FILE)) || 
              (File.exists?(File.join(ENV['HOME'], RC_FILE)) && File.readlines(File.join(ENV['HOME'], RC_FILE))) ||
              []

      defaults = lines.detect do |line|
        match = /CONTAINER_RUN=(.*)/.match(line.strip)
        match && match[1]
      end
    end

    defaults ||= 'run'
    /\b(#{defaults.split(/,/).map(&:strip).join('|')})\b/
  end

  def fetch_command(cmd)
    docker_compose = {
      start:  "docker-compose up #{options[:daemonize]}",
      stop:   "docker-compose down",
      build:  "docker-compose build",
      remove: "",
    }

    docker = {
      start:  "docker run #{ports} #{link} #{options[:daemonize]} --name #{image} #{image}",
      stop:   "docker stop #{image}",
      build:  "docker build . --no-cache=true -t #{image}",
      remove: "docker rm #{image}",
    }

    (compose? ? docker_compose : docker)[cmd.to_sym]
  end

  def debug_container
    print_and_exec(%|docker run -it --entrypoint=/bin/bash #{image} -s|)
  end

  def stop_container
    print_and_exec fetch_command(:stop)
  end

  def remove_container
    print_and_exec fetch_command(:remove)
  end

  def remove_image
    print_and_exec "docker rmi #{image}"
  end

  def stop_and_remove_container

    stop_container && remove_container
  end

  def start_container
    print_and_exec fetch_command(:start)
  end

  def compose?
    File.exist?('docker-compose.yaml')
  end

  def restart_container
    stop_and_remove_container && start_container
  end

  # Prepend docker command to run command in container and execute it
  def exec_in_container(container_cmd)
    print_and_exec %|docker exec -i -t #{image} sh -c "#{container_cmd}"|
  end

  # Print the full command and replace current process with cmd
  def print_and_exec(cmd)
    cmd.squeeze!(' ')
    puts "RUNNING: #{cmd}\n\n"
    exec cmd
  end

  def build_container
    print_and_exec fetch_command(:build)
  end

  def shell_into_container
    exec_in_container '/bin/bash'
  end

  def new_app
    require 'digest/sha1'
    if args.length != 1
      puts "SYNTAX\n\nhustle new [image]"
      exit 1
    end
    base_image = args.first

    @dev_container = "#{base_image.sub(/base$/,'app')}-#{Digest::SHA1.hexdigest(Time.now.to_s)[0..5]}"
    File.write(DOT_FILE, "CONTAINER_NAME=#{dev_container}")

    puts "Attempting to start container based on #{base_image}"
    `docker run -d --name #{image} #{base_image}`

    puts "Copying #{image}:/app to local"
    `docker cp #{image}:/app $(pwd)`

    puts "Removing #{image}"
    stop_and_remove

    puts "Building new image #{image}"
    build
  end

  #
  # Script methods
  #

  def execute
    case command
    when 'new'
      new_app
    when "rebuild", "build"
      build_container
    when "file-permissions-sync"
      exec_in_container("export USERID=#{Process.uid} && export GROUPID=#{Process.gid} && file-chown-sync")
    when "run-hard", "run"
      exec_in_container args.join(' ')
    when container_run_regex 
      # Add the command back in
      exec_in_container args.unshift(command).join(' ')
    when 'debug'
      debug_container
    when "shell"
      shell_into_container
    when "restart", "r"
      restart_container
    when "start", "s"
      start_container
    when "stop"
      stop_container
    when "rm"
      remove_container
    when 'pristine'
      stop_and_remove && remove_image
    else
      puts "\n\nERROR: hustle '#{command}' does not exist. Run 'hustle --help'"
      puts "\n\nDefault run syntax:\n\n\t#{container_run_regex}\n\n"
      puts "\n\nConfig:\n\n\t#{config.inspect}\n\n"
      puts "\n\nOptions:\n\n\t#{options.inspect}\n\n"
    end
  end

  def prod_container 
    "#{dev_container}-prod"
  end

  def env
    config('env') || options.fetch(:env, "development")
  end

  def config(key = nil)
    @config ||= load_config!
    key.nil? ? @config : @config.fetch(key, "No value for :#{key}")
  end

  def dev_container
    @dev_container ||= config 'CONTAINER_NAME'
  end

  private

  def load_config!(file = DOT_FILE)
    if File.exists?(DOT_FILE)
      File.readlines(DOT_FILE).each_with_object({}) do |line, hsh|
        key, value = line.split(/=/).map(&:strip)
        hsh[key] = value
      end
    else
      raise "Unable to find '#{DOT_FILE}' in current directory"
    end
  end

  def ports
    "-p #{options.fetch(:ports, "3000:3000")}"
  end

  def link
    options[:link] || '-v $(pwd)/myapp:/myapp'
  end

  def image
    if options[:service]
      config "#{options[:service]}_container_name".upcase
    else
      options[:env] == "production" ? prod_container : dev_container
    end
  end

  def app_dir
    super || "app"
  end

  def command 
    argv.first
  end

  def args
    argv.drop(1)
  end
end


options = {}
OptionParser.new do |opts|
  opts.banner = <<-EOS
  Side Hustle Kit Command Line App. Copyright 2017. SHK, Inc.

  USAGE

  hustle build [image]                # build image
  hustle new [image]                  # creates new dev env based on base image

  hustle stop [container]             # stop container
  hustle start [container]            # start dev container
  hustle shell [container]            # open shell on running container

  hustle pristine [container]         # stop and remove container from docker
  hustle rebuild, [container]         # rebuild container

  hustle sync [container]             # copy dev app files to local
  hustle file-permissions-sync [container]  # watch for new files and sync
  hustle run [cmd] [-s service]       # run command on service from within script
  hustle run-hard [cmd] [container]   # leave script and run command on container

  EOS

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-d", "Run as daemon") do
    options[:daemonize] = '-d'
  end

  opts.on("-e", "--env ENV", "Environment") do |env|
    options[:env] = env
  end

  opts.on("-nl", "--no-links", "Do not link to shared volume") do
    options[:link] = ""
  end

  opts.on("-l", "--link LINK", "Link to shared volume") do |link|
    options[:link] = link
  end

  opts.on("-f", "--force", "Force action") do
    options[:force] = '-f'
  end

  opts.on("-p", "--ports external:internal", "Link external to interal ports") do |ports|
    options[:ports] = ports
  end

  opts.on("-s", "--service [web|db||]", "Service to target with command, defaults to web") do |service|
    options[:service] = service
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
  end
end.parse!

Hustler.new(ARGV, options).execute
